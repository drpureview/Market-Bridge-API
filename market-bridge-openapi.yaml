openapi: 3.1.0
info:
  title: Market Bridge API (Upstox + yfinance)
  version: "1.2.0"
  description: Market Bridge wrapper for Upstox + yfinance (indicators, screeners, LTP, historical).
servers:
  - url: https://upstox-api.onrender.com
paths:
  /health:
    get:
      operationId: health_check
      summary: Health check
      responses:
        "200":
          description: Service health
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  ts: { type: number }

  /oauth/upstox/login:
    get:
      operationId: oauth_upstox_login
      summary: Redirect to Upstox OAuth login dialog
      parameters:
        - name: user_key
          in: query
          required: true
          schema: { type: string }
      responses:
        "302":
          description: Redirect to Upstox authorization dialog

  /oauth/upstox/callback:
    get:
      operationId: oauth_upstox_callback
      summary: OAuth callback for Upstox
      parameters:
        - name: code
          in: query
          required: true
          schema: { type: string }
        - name: state
          in: query
          required: false
          schema: { type: string }
      responses:
        "200":
          description: HTML result (linked or error)
          content:
            text/html:
              schema: { type: string }

  /api/map:
    get:
      operationId: map_symbol
      summary: Map symbol to Upstox instrument
      parameters:
        - name: symbol
          in: query
          required: true
          schema:
            type: string
            example: RELIANCE.NS
      responses:
        "200":
          description: Instrument mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MapResponse"

  /api/ltp:
    get:
      operationId: get_ltp
      summary: Get LTP from Upstox
      security:
        - bearerAuth: []
      parameters:
        - name: instrument_keys
          in: query
          required: true
          schema:
            type: string
            example: "NSE_EQ|INE002A01018"
      responses:
        "200":
          description: LTP response (Upstox)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LTPResponse"

  /api/historical:
    get:
      operationId: get_historical_yf
      summary: Get historical candles via yfinance (fallback)
      parameters:
        - name: symbol
          in: query
          required: true
          schema:
            type: string
            example: RELIANCE.NS
        - name: period
          in: query
          schema: { type: string, default: "6mo" }
        - name: interval
          in: query
          schema: { type: string, default: "1d" }
      responses:
        "200":
          description: Candle list (yfinance)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalResponse"

  /api/historical_upstox:
    get:
      operationId: get_historical_upstox
      summary: Get historical candles from Upstox (preferred for long-range)
      security:
        - bearerAuth: []
      parameters:
        - name: symbol
          in: query
          schema: { type: string, example: RELIANCE.NS }
        - name: instrument_key
          in: query
          schema: { type: string }
        - name: unit
          in: query
          schema: { type: string, enum: [days, weeks, months], default: weeks }
        - name: interval
          in: query
          schema: { type: string, default: "1" }
        - name: years
          in: query
          schema: { type: integer, default: 10 }
        - name: to_date
          in: query
          schema: { type: string, format: date }
        - name: from_date
          in: query
          schema: { type: string, format: date }
      responses:
        "200":
          description: Candle list (Upstox)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoricalUpstoxResponse"

  /api/indicators:
    post:
      operationId: compute_indicators
      summary: Compute RSI, SMA/EMA, MACD, Bollinger
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndicatorsReq"
      responses:
        "200":
          description: Indicators result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndicatorsResp"
        "404":
          description: No data

  /api/fundamentals:
    get:
      operationId: get_fundamentals
      summary: Get fundamentals (PE, PB, MarketCap, approximate ROCE)
      parameters:
        - name: symbol
          in: query
          required: true
          schema: { type: string, example: RELIANCE.NS }
      responses:
        "200":
          description: Fundamentals
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FundamentalsResponse"

  /api/update_constituents:
    post:
      operationId: update_constituents
      summary: Update constituents for an index (fetch & cache)
      parameters:
        - name: index
          in: query
          required: true
          schema: { type: string, example: "NIFTY 50" }
      responses:
        "200":
          description: Update result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateConstituentsResponse"

  /api/constituents:
    get:
      operationId: get_constituents
      summary: Get cached constituents for an index
      parameters:
        - name: index
          in: query
          required: true
          schema: { type: string, example: "NIFTY 50" }
      responses:
        "200":
          description: Constituents list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConstituentsResponse"

  /api/listings:
    get:
      operationId: get_listings
      summary: Dump Upstox instrument listings for an exchange (NSE_EQ or BSE_EQ)
      security:
        - bearerAuth: []
      parameters:
        - name: exchange
          in: query
          required: true
          schema: { type: string, example: NSE_EQ }
      responses:
        "200":
          description: Listings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListingsResponse"

  /api/screen_indices:
    post:
      operationId: screen_indices
      summary: Run screeners on indices or symbol lists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenIndicesReq"
      responses:
        "200":
          description: Screener results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScreenIndicesResp"

  /api/signal:
    post:
      operationId: signal_endpoint
      summary: Get per-strategy signals for a single symbol
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignalReq"
      responses:
        "200":
          description: Signal result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignalResp"
   /api/breakout_signal:
    post:
      operationId: breakout_signal
      tags: [Breakouts]
      summary: Detect breakout for a single symbol (volume-confirmed)
      description: >
        Uses latest available candles (yfinance for daily by default; Upstox for weekly/monthly)
        and applies Donchian/HHV levels + volume rules to confirm breakouts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakoutSignalReq'
            example:
              symbol: RELIANCE.NS
              params:
                data_source: auto
                unit: days
                interval: "1"
                yf_period: 1y
                level_method: donchian20
                vol_avg_window: 20
                vol_spike_min: 1.5
                sustained_sessions: 2
                sustained_min_ratio: 1.0
                divergence_window: 5
                pullback_window: 10
                pullback_volume_ratio_max: 0.5
                lookback_bars: 180
                require_pattern: false
      responses:
        "200":
          description: Breakout detection result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakoutSignalResp'
              example:
                symbol: RELIANCE.NS
                breakout_date: "2025-06-10"
                breakout_level: 2785.0
                close_at_breakout: 2801.5
                current_price: 2810.2
                volume_at_breakout: 12000000
                avg20_volume: 7000000
                volume_ratio: 1.71
                sustained_ok: true
                divergence_flag: false
                candle_pattern: bullish_engulfing
                pullback_ok: true
                score: 5
                verdict: CONFIRMED
                data_source_used: yfinance
        "400":
          description: Bad request
        "404":
          description: No candles available for the symbol
        "500":
          description: Server error

  /api/breakouts_symbols_one:
    post:
      operationId: breakouts_symbols_one
      tags: [Breakouts]
      summary: Scan a list of symbols one-at-a-time (cursor-based)
      description: >
        The server analyzes exactly **one** symbol per request, indicated by `cursor`.
        The client (Custom GPT) loops over the full list by incrementing `cursor`
        until the response returns `done: true`. No user confirmation is needed between calls.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakoutsSymbolsReq'
            example:
              symbols: ["RELIANCE.NS","TCS.NS","INFY.NS"]
              cursor: 0
              params:
                data_source: auto
                unit: days
                interval: "1"
                yf_period: 1y
                level_method: donchian20
                vol_spike_min: 1.5
                sustained_sessions: 2
                pullback_volume_ratio_max: 0.5
      responses:
        "200":
          description: Result for the symbol at the given cursor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakoutsSymbolsResp'
              example:
                symbols_count: 3
                cursor: 0
                next_cursor: 1
                done: false
                analyzed_symbol: RELIANCE.NS
                result:
                  symbol: RELIANCE.NS
                  breakout_date: "2025-06-10"
                  breakout_level: 2785.0
                  close_at_breakout: 2801.5
                  current_price: 2810.2
                  volume_at_breakout: 12000000
                  avg20_volume: 7000000
                  volume_ratio: 1.71
                  sustained_ok: true
                  divergence_flag: false
                  candle_pattern: bullish_engulfing
                  pullback_ok: true
                  score: 5
                  verdict: CONFIRMED
                  data_source_used: yfinance
        "400":
          description: Bad request
        "404":
          description: No candles available for the symbol
        "500":
          description: Server error



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

  schemas:
    # ---- shared candle schemas ----
    Candle:
      type: object
      properties:
        t: { type: string, format: date-time }
        o: { type: number }
        h: { type: number }
        l: { type: number }
        c: { type: number }
        v: { type: number }

    HistoricalResponse:
      type: object
      properties:
        symbol: { type: string }
        candles:
          type: array
          items: { $ref: "#/components/schemas/Candle" }

    HistoricalUpstoxResponse:
      type: object
      properties:
        instrument_key: { type: string }
        unit: { type: string }
        interval: { type: string }
        from_date: { type: string, format: date }
        to_date: { type: string, format: date }
        count: { type: integer }
        candles:
          type: array
          items: { $ref: "#/components/schemas/Candle" }

    # ---- new explicit schemas for endpoints that complained ----
    MapResponse:
      type: object
      properties:
        symbol: { type: string }
        found: { type: boolean }
        trading_symbol: { type: string, nullable: true }
        instrument_key: { type: string, nullable: true }
        segment: { type: string, nullable: true }
        exchange: { type: string, nullable: true }
        short_name: { type: string, nullable: true }

    LTPQuote:
      type: object
      properties:
        last_traded_price: { type: number, nullable: true }
        ltp: { type: number, nullable: true }
        last_price: { type: number, nullable: true }
        close: { type: number, nullable: true }

    LTPResponse:
      type: object
      properties:
        data:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/LTPQuote"

    FundamentalsResponse:
      type: object
      properties:
        symbol: { type: string }
        PE: { type: number, nullable: true }
        PB: { type: number, nullable: true }
        MarketCap: { type: number, nullable: true }
        ROCE_approx: { type: number, nullable: true }

    UpdateConstituentsResponse:
      type: object
      properties:
        index: { type: string }
        source: { type: string, nullable: true }
        count: { type: integer }
        file: { type: string, nullable: true }
        message: { type: string, nullable: true }

    ConstituentsEntry:
      type: object
      properties:
        symbol: { type: string }
        company: { type: string }

    ConstituentsResponse:
      type: object
      properties:
        index: { type: string }
        found: { type: boolean }
        count: { type: integer }
        constituents:
          type: array
          items: { $ref: "#/components/schemas/ConstituentsEntry" }
        message: { type: string, nullable: true }

    ListingEntry:
      type: object
      properties:
        trading_symbol: { type: string }
        instrument_key: { type: string }
        short_name: { type: string }

    ListingsResponse:
      type: object
      properties:
        exchange: { type: string }
        count: { type: integer }
        listings:
          type: array
          items: { $ref: "#/components/schemas/ListingEntry" }

    # ---- request/response for indicators & screeners ----
    IndicatorsReq:
      type: object
      required: [symbol]
      properties:
        symbol: { type: string }
        data_source:
          type: string
          enum: [auto, upstox, yfinance]
          default: auto
        unit: { type: string, enum: [days, weeks, months], default: days }
        interval: { type: string, default: "1" }
        period: { type: string, default: "1y" }
        hist_date: { type: string, format: date }

    IndicatorsResp:
      type: object
      properties:
        symbol: { type: string }
        as_of: { type: string, format: date }
        SMA: { type: object, additionalProperties: { type: number } }
        EMA: { type: object, additionalProperties: { type: number } }
        RSI_14: { type: number, nullable: true }
        MACD:
          type: object
          properties:
            macd: { type: number }
            signal: { type: number }
            hist: { type: number }
        Bollinger:
          type: object
          properties:
            MA20: { type: number, nullable: true }
            Upper: { type: number, nullable: true }
            Lower: { type: number, nullable: true }

    ScreenIndicesReq:
      type: object
      properties:
        indices: { type: array, items: { type: string } }
        symbols: { type: array, items: { type: string } }
        strategies: { type: array, items: { type: string } }
        min_strategies: { type: integer, default: 2 }
        balance: { type: number, default: 100000 }
        data_source:
          type: string
          enum: [auto, upstox, yfinance]
          default: auto
        unit: { type: string, default: days }
        interval: { type: string, default: "1" }
        historical_date: { type: string, format: date }
        use_upstox_price: { type: boolean, default: true }

    StrategyDetail:
      type: object
      properties:
        signal: { type: string }
        price: { type: number, nullable: true }
        qty: { type: integer, nullable: true }
        stop_loss: { type: number, nullable: true }
        target: { type: number, nullable: true }
        rsi: { type: number, nullable: true }
        ma200: { type: number, nullable: true }

    ScreenIndicesResp:
      type: object
      properties:
        requested_indices: { type: array, items: { type: string }, nullable: true }
        requested_symbols: { type: array, items: { type: string }, nullable: true }
        strategies_run: { type: array, items: { type: string } }
        min_strategies_required: { type: integer }
        historical_date: { type: string, nullable: true }
        results_count: { type: integer }
        results:
          type: array
          items:
            type: object
            properties:
              symbol: { type: string }
              current_price: { type: number, nullable: true }
              per_strategy:
                type: object
                additionalProperties: { $ref: "#/components/schemas/StrategyDetail" }
              hit_count: { type: integer }
              combined: { type: string }
        timestamp: { type: string, format: date-time }

    SignalReq:
      type: object
      required: [symbol]
      properties:
        symbol: { type: string }
        balance: { type: number, default: 100000.0 }
        data_source: { type: string, enum: [auto, upstox, yfinance], default: auto }
        unit: { type: string, default: days }
        interval: { type: string, default: "1" }
        historical_date: { type: string, format: date }

    SignalResp:
      type: object
      properties:
        symbol: { type: string }
        as_of: { type: string, format: date }
        current_price: { type: number }
        per_strategy:
          type: object
          additionalProperties: { $ref: "#/components/schemas/StrategyDetail" }
        hit_count: { type: integer }
        combined: { type: string }

   BreakoutParams:
      type: object
      additionalProperties: false
      properties:
        data_source:
          type: string
          enum: [auto, upstox, yfinance]
          default: auto
        unit:
          type: string
          enum: [days, weeks, months]
          default: days
        interval:
          type: string
          default: "1"
        years:
          type: integer
          default: 2
        yf_period:
          type: string
          default: "1y"
        level_method:
          type: string
          enum: [donchian20, donchian55, hhv_52w]
          default: donchian20
        vol_avg_window:
          type: integer
          default: 20
        vol_spike_min:
          type: number
          default: 1.5
        sustained_sessions:
          type: integer
          default: 2
        sustained_min_ratio:
          type: number
          default: 1.0
        divergence_window:
          type: integer
          default: 5
        pullback_window:
          type: integer
          default: 10
        pullback_volume_ratio_max:
          type: number
          default: 0.5
        lookback_bars:
          type: integer
          default: 180
        require_pattern:
          type: boolean
          default: false

    BreakoutHit:
      type: object
      additionalProperties: false
      properties:
        symbol: { type: string }
        breakout_date: { type: string, nullable: true }
        breakout_level: { type: number, nullable: true }
        close_at_breakout: { type: number, nullable: true }
        current_price: { type: number, nullable: true }
        volume_at_breakout: { type: number, nullable: true }
        avg20_volume: { type: number, nullable: true }
        volume_ratio: { type: number, nullable: true }
        sustained_ok: { type: boolean, nullable: true }
        divergence_flag: { type: boolean, nullable: true }
        candle_pattern: { type: string, nullable: true }
        pullback_ok: { type: boolean, nullable: true }
        score: { type: integer, default: 0 }
        verdict:
          type: string
          enum: [CONFIRMED, WEAK, FAILED, NO_BREAKOUT, ERROR]
        data_source_used: { type: string, nullable: true }
        error: { type: string, nullable: true }
      required: [symbol, verdict]

    BreakoutSignalReq:
      type: object
      additionalProperties: false
      properties:
        symbol:
          type: string
          description: NSE/BSE ticker with suffix (e.g., RELIANCE.NS, TCS.NS)
        params:
          $ref: '#/components/schemas/BreakoutParams'
      required: [symbol]

    BreakoutSignalResp:
      allOf:
        - $ref: '#/components/schemas/BreakoutHit'

    BreakoutsSymbolsReq:
      type: object
      additionalProperties: false
      properties:
        symbols:
          type: array
          description: Full list of symbols to scan. The server analyzes exactly one per call (cursor).
          items: { type: string }
        cursor:
          type: integer
          description: Index of the symbol to analyze in this request.
          default: 0
        params:
          $ref: '#/components/schemas/BreakoutParams'
      required: [symbols, cursor]

    BreakoutsSymbolsResp:
      type: object
      additionalProperties: false
      properties:
        symbols_count: { type: integer }
        cursor: { type: integer }
        next_cursor: { type: integer, nullable: true }
        done: { type: boolean }
        analyzed_symbol: { type: string }
        result:
          $ref: '#/components/schemas/BreakoutHit'
      required: [symbols_count, cursor, done, analyzed_symbol, result]
