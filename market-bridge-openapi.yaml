openapi: 3.1.0
info:
  title: Upstox SellWatch API
  version: "1.2.1"
  description: >
    Breakout-end scans for holdings, watchlists, and single symbols; index batching; long-term strategies;
    price-on-date. OAuth via /auth/start → /auth/callback. Legacy OAuth routes included.

servers:
  - url: https://upstox-api.onrender.com
    description: Render deployment

paths:
  /healthz:
    get:
      operationId: healthz
      summary: Health check
      description: Returns service status and time.
      responses:
        "200":
          description: OK

  /auth/start:
    get:
      operationId: authStart
      summary: Start Upstox OAuth
      description: Redirects to Upstox authorization dialog using env client settings.
      responses:
        "302":
          description: Redirect

  /auth/callback:
    get:
      operationId: authCallback
      summary: Upstox OAuth callback
      description: Exchanges code for tokens and stores them in memory.
      parameters:
        - in: query
          name: code
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Tokens captured

  /oauth/upstox/login:
    get:
      operationId: legacyLogin
      summary: Legacy OAuth start
      description: Legacy path that redirects to Upstox authorization dialog.
      responses:
        "302":
          description: Redirect

  /oauth/upstox/callback:
    get:
      operationId: legacyCallback
      summary: Legacy OAuth callback
      description: Legacy path that exchanges code for tokens.
      parameters:
        - in: query
          name: code
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Tokens captured

  /scan/holdings:
    get:
      operationId: scanHoldings
      summary: Scan holdings for breakout-end
      description: >
        Pulls holdings, fetches OHLCV (Upstox→yfinance fallback), evaluates breakout-end with confirmations.
        Returns flagged rows only.
      responses:
        "200":
          description: Flagged holdings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResult'

  /scan/watchlist:
    post:
      operationId: scanWatchlist
      summary: Scan a custom watchlist
      description: Evaluates breakout-end on provided tickers. Uses Upstox if available, else yfinance.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [tickers]
              properties:
                tickers:
                  type: array
                  items: { type: string }
              example:
                tickers: ["RELIANCE", "TCS", "INFY"]
      responses:
        "200":
          description: Flagged watchlist results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScanResult'

  /scan/exit:
    get:
      operationId: scanExit
      summary: Single-symbol breakout-end
      description: Checks one symbol for breakout-end. Uses Upstox if available, else yfinance.
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string, example: RELIANCE }
      responses:
        "200":
          description: Exit signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExitSingleOut'
        "404":
          description: No data / insufficient history

  /scan/index:
    get:
      operationId: scanIndex
      summary: Scan an index in batches
      description: >
        Resolves index members (NSE CSV→Wikipedia fallback) and scans batch_size per call.
        Returns next_cursor. Each row has price, stop, target, trend.
      parameters:
        - in: query
          name: index
          required: true
          schema: { type: string, example: NIFTY50 }
        - in: query
          name: cursor
          required: false
          schema: { type: string }
        - in: query
          name: batch_size
          required: false
          schema: { type: integer, minimum: 1, maximum: 15, example: 10 }
        - in: query
          name: historical_date
          required: false
          schema: { type: string, example: "2025-08-01" }
      responses:
        "200":
          description: Batch results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndexScanOut'

  /scan/stock:
    get:
      operationId: scanStock
      summary: Single-stock long-term strategies
      description: >
        Four strategies (MA stack, near 52W high, RSI+MACD, EMA20 bounce). Returns buy suggestion with stop/target.
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string, example: RELIANCE }
      responses:
        "200":
          description: Strategy decision
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StrategyOut'
        "404":
          description: No OHLCV data

  /price_on_date:
    get:
      operationId: priceOnDate
      summary: Close on historical date
      description: Returns the close price for the symbol on the given date (if available).
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string, example: TCS }
        - in: query
          name: date
          required: true
          schema: { type: string, example: "2024-08-01" }
      responses:
        "200":
          description: Price result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceOnDateOut'
        "404":
          description: Not found

components:
  schemas:
    Metrics:
      type: object
      properties:
        rsi_d0: { type: number, example: 68.2 }
        near_high: { type: boolean, example: true }
        ret1d_pct: { type: number, example: -2.15 }
        vol_spike_d0: { type: boolean, example: true }
        red_candle_d1: { type: boolean, example: true }
        lower_high: { type: boolean, example: true }
        lower_low: { type: boolean, example: true }
        cross_ema20: { type: boolean, example: false }
        high_52w: { type: number, example: 2850.0 }
        close_d0: { type: number, example: 2795.5 }
        close_d1: { type: number, example: 2735.2 }

    ScanResult:
      type: object
      properties:
        symbol:
          type: string
          example: RELIANCE
        qty:
          type: number
          nullable: true
          example: 25
        flagged:
          type: boolean
          example: true
        confirm:
          type: boolean
          example: true
        label:
          type: string
          enum: ["STRONG EXIT", "WATCH CLOSELY", "HOLD", "DATA_UNAVAILABLE"]
          example: "STRONG EXIT"
        metrics:
          $ref: '#/components/schemas/Metrics'

    ExitSingleOut:
      type: object
      properties:
        symbol: { type: string, example: RELIANCE }
        as_of: { type: string, example: "2025-09-08" }
        current_price: { type: number, example: 2745.20 }
        flagged: { type: boolean, example: true }
        confirm: { type: boolean, example: false }
        label:
          type: string
          enum: ["STRONG EXIT", "WATCH CLOSELY", "HOLD"]
          example: "WATCH CLOSELY"
        metrics:
          $ref: '#/components/schemas/Metrics'

    IndexRow:
      type: object
      properties:
        symbol: { type: string, example: HDFCBANK.NS }
        current_price: { type: number, example: 1650.50 }
        stop_loss: { type: number, example: 1588.20 }
        target_price: { type: number, example: 1810.75 }
        trend: { type: string, example: Uptrend }
        price_on_date:
          type: number
          nullable: true
          description: Present only if historical_date was supplied and matched a candle

    IndexScanOut:
      type: object
      properties:
        index: { type: string, example: NIFTY50 }
        processed: { type: integer, example: 10 }
        total: { type: integer, example: 50 }
        batch:
          type: array
          items: { $ref: '#/components/schemas/IndexRow' }
        next_cursor:
          type: string
          nullable: true
          description: Pass this token to /scan/index to continue
        done: { type: boolean, example: false }

    StrategyOut:
      type: object
      properties:
        symbol: { type: string, example: TCS }
        date: { type: string, example: "2025-09-08" }
        current_price: { type: number, example: 4200.25 }
        buy_signal: { type: boolean, example: true }
        strategies_hit:
          type: array
          items: { type: string }
          example: ["Uptrend_50>200", "Near_52w_High", "RSI_55_70_MACD_Bullish"]
        stop_loss: { type: number, example: 3990.0 }
        target_price: { type: number, example: 4830.0 }

    PriceOnDateOut:
      type: object
      properties:
        symbol: { type: string, example: INFY }
        date: { type: string, example: "2024-08-01" }
        close: { type: number, nullable: true, example: 1585.20 }
        found: { type: boolean, example: true }
