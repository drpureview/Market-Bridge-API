openapi: 3.1.0
info:
  title: Market Bridge API
  version: "1.0.0"
  description: |
    Bridge service for Upstox and yfinance market data, indicators, screeners,
    and volume-confirmed breakout detection.

servers:
  - url: https://upstox-api.onrender.com

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  schemas:
    Candle:
      type: object
      additionalProperties: false
      properties:
        t: { type: string, description: "Timestamp (ISO-8601 or exchange time)", example: "2025-09-04 10:00:00" }
        o: { type: number, description: "Open" }
        h: { type: number, description: "High" }
        l: { type: number, description: "Low" }
        c: { type: number, description: "Close" }
        v: { type: number, description: "Volume" }
      required: [t, o, h, l, c, v]

    HistoricalResponse:
      type: object
      additionalProperties: false
      properties:
        symbol: { type: string }
        candles:
          type: array
          items: { $ref: "#/components/schemas/Candle" }
      required: [symbol, candles]

    MapResponse:
      type: object
      additionalProperties: true
      properties:
        symbol: { type: string }
        instrument_key: { type: string }
        exchange: { type: string }

    LTPResponse:
      type: object
      additionalProperties: true
      properties:
        data:
          type: object
          additionalProperties: true

    FundamentalsResponse:
      type: object
      additionalProperties: true
      properties:
        symbol: { type: string }
        metrics:
          type: object
          additionalProperties: true
      required: [symbol]

    ConstituentsResponse:
      type: object
      additionalProperties: false
      properties:
        index: { type: string }
        symbols:
          type: array
          items: { type: string }
      required: [symbols]

    UpdateConstituentsResponse:
      type: object
      additionalProperties: false
      properties:
        index: { type: string }
        updated: { type: boolean }
        count: { type: integer }

    ListingsResponse:
      type: object
      additionalProperties: false
      properties:
        exchange: { type: string }
        symbols:
          type: array
          items: { type: string }

    ScreenIndicesRequest:
      type: object
      additionalProperties: true
      properties:
        indices:
          type: array
          items: { type: string }
        strategies:
          type: array
          items: { type: string }
        min_strategies_required: { type: integer, default: 2 }

    ScreenIndicesResponse:
      type: object
      additionalProperties: true
      properties:
        requested_indices:
          type: array
          items: { type: string }
        results_count: { type: integer }
        results:
          type: array
          items:
            type: object
            additionalProperties: true

    SignalRequest:
      type: object
      additionalProperties: false
      properties:
        symbol: { type: string }
        strategies:
          type: array
          items: { type: string }
      required: [symbol]

    SignalResponse:
      type: object
      additionalProperties: true
      properties:
        symbol: { type: string }
        verdict: { type: string, description: "BUY/SELL/HOLD or similar" }

    # ==== NEW explicit schemas to fix builder errors ====
    UpstoxLoginResponse:
      type: object
      additionalProperties: true
      properties:
        url:
          type: string
          description: Redirect/authorize URL the client may open.
          example: "https://api.upstox.com/login/authorize?client_id=...&redirect_uri=..."
        method:
          type: string
          description: HTTP method to use for the URL (usually GET).
          example: "GET"
        state:
          type: string
          description: Opaque state value (if applicable).
      required: [url]

    UpstoxCallbackResponse:
      type: object
      additionalProperties: true
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Authorization successful."
        access_granted:
          type: boolean
          example: true

    IndicatorsResponse:
      type: object
      additionalProperties: true
      properties:
        symbol:
          type: string
          example: "RELIANCE.NS"
        data_source_used:
          type: string
          example: "yfinance"
        indicators:
          type: object
          additionalProperties: true
          properties:
            rsi: { type: number, nullable: true }
            macd:
              type: object
              additionalProperties: true
              properties:
                macd: { type: number, nullable: true }
                signal: { type: number, nullable: true }
                hist: { type: number, nullable: true }
            sma:
              type: object
              additionalProperties: true
              properties:
                sma50: { type: number, nullable: true }
                sma100: { type: number, nullable: true }
                sma150: { type: number, nullable: true }
                sma200: { type: number, nullable: true }
            bollinger:
              type: object
              additionalProperties: true
              properties:
                upper: { type: number, nullable: true }
                middle: { type: number, nullable: true }
                lower: { type: number, nullable: true }
            roce: { type: number, nullable: true }
        notes:
          type: string
          nullable: true
          example: "Computed using latest daily candles."
    # ==== /NEW ====


    BreakoutParams:
      type: object
      additionalProperties: false
      properties:
        data_source:
          type: string
          enum: [auto, upstox, yfinance]
          default: auto
        unit:
          type: string
          enum: [days, weeks, months]
          default: days
        interval:
          type: string
          default: "1"
        years:
          type: integer
          default: 2
        yf_period:
          type: string
          default: "1y"
        level_method:
          type: string
          enum: [donchian20, donchian55, hhv_52w]
          default: donchian20
        vol_avg_window:
          type: integer
          default: 20
        vol_spike_min:
          type: number
          default: 1.5
        sustained_sessions:
          type: integer
          default: 2
        sustained_min_ratio:
          type: number
          default: 1.0
        divergence_window:
          type: integer
          default: 5
        pullback_window:
          type: integer
          default: 10
        pullback_volume_ratio_max:
          type: number
          default: 0.5
        lookback_bars:
          type: integer
          default: 180
        require_pattern:
          type: boolean
          default: false

    BreakoutHit:
      type: object
      additionalProperties: false
      properties:
        symbol: { type: string }
        breakout_date: { type: string, nullable: true }
        breakout_level: { type: number, nullable: true }
        close_at_breakout: { type: number, nullable: true }
        current_price: { type: number, nullable: true }
        volume_at_breakout: { type: number, nullable: true }
        avg20_volume: { type: number, nullable: true }
        volume_ratio: { type: number, nullable: true }
        sustained_ok: { type: boolean, nullable: true }
        divergence_flag: { type: boolean, nullable: true }
        candle_pattern: { type: string, nullable: true }
        pullback_ok: { type: boolean, nullable: true }
        score: { type: integer, default: 0 }
        verdict:
          type: string
          enum: [CONFIRMED, WEAK, FAILED, NO_BREAKOUT, ERROR]
        data_source_used: { type: string, nullable: true }
        error: { type: string, nullable: true }
      required: [symbol, verdict]

    BreakoutSignalReq:
      type: object
      additionalProperties: false
      properties:
        symbol:
          type: string
          description: NSE/BSE ticker with suffix (e.g., RELIANCE.NS, TCS.NS)
        params:
          $ref: '#/components/schemas/BreakoutParams'
      required: [symbol]

    BreakoutSignalResp:
      allOf:
        - $ref: '#/components/schemas/BreakoutHit'

    BreakoutsSymbolsReq:
      type: object
      additionalProperties: false
      properties:
        symbols:
          type: array
          description: Full list of symbols to scan. The server analyzes exactly one per call (cursor).
          items: { type: string }
        cursor:
          type: integer
          description: Index of the symbol to analyze in this request.
          default: 0
        params:
          $ref: '#/components/schemas/BreakoutParams'
      required: [symbols, cursor]

    BreakoutsSymbolsResp:
      type: object
      additionalProperties: false
      properties:
        symbols_count: { type: integer }
        cursor: { type: integer }
        next_cursor: { type: integer, nullable: true }
        done: { type: boolean }
        analyzed_symbol: { type: string }
        result:
          $ref: '#/components/schemas/BreakoutHit'
      required: [symbols_count, cursor, done, analyzed_symbol, result]

paths:
  /health:
    get:
      operationId: health
      tags: [System]
      summary: Health check
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  status: { type: string, example: ok }

  /oauth/upstox/login:
    get:
      operationId: oauth_upstox_login
      tags: [OAuth]
      summary: Start Upstox login
      responses:
        "200":
          description: Login start info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstoxLoginResponse'

  /oauth/upstox/callback:
    get:
      operationId: oauth_upstox_callback
      tags: [OAuth]
      summary: Upstox callback handler
      responses:
        "200":
          description: Callback result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpstoxCallbackResponse'

  /api/map:
    get:
      operationId: map_symbol_to_instrument
      tags: [Market]
      summary: Map a symbol to Upstox instrument key
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Mapping result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapResponse'

  /api/ltp:
    get:
      operationId: ltp
      tags: [Market]
      summary: Get last traded price for instrument keys
      parameters:
        - in: query
          name: instrument_keys
          required: true
          schema: { type: string }
      responses:
        "200":
          description: LTP result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LTPResponse'

  /api/historical:
    get:
      operationId: historical_yfinance
      tags: [Market]
      summary: Historical candles via yfinance
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string }
        - in: query
          name: period
          required: false
          schema: { type: string, default: 6mo }
        - in: query
          name: interval
          required: false
          schema: { type: string, default: 1d }
      responses:
        "200":
          description: Historical candles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalResponse'

  /api/historical_upstox:
    get:
      operationId: historical_upstox
      tags: [Market]
      summary: Historical candles via Upstox
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string }
        - in: query
          name: unit
          required: false
          schema: { type: string, enum: [days, weeks, months], default: days }
        - in: query
          name: interval
          required: false
          schema: { type: string, default: "1" }
        - in: query
          name: years
          required: false
          schema: { type: integer, default: 2 }
        - in: query
          name: to_date
          required: false
          schema: { type: string }
      responses:
        "200":
          description: Historical candles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricalResponse'

  /api/indicators:
    post:
      operationId: indicators
      tags: [Analytics]
      summary: Compute indicators like RSI/ROCE/SMA/MACD/Bollinger, etc.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
              properties:
                symbol: { type: string }
                candles:
                  type: array
                  items: { $ref: '#/components/schemas/Candle' }
      responses:
        "200":
          description: Indicators result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IndicatorsResponse'

  /api/fundamentals:
    get:
      operationId: fundamentals
      tags: [Analytics]
      summary: Fetch fundamental metrics for a symbol
      parameters:
        - in: query
          name: symbol
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Fundamentals payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundamentalsResponse'

  /api/update_constituents:
    post:
      operationId: update_constituents
      tags: [Universe]
      summary: Update stored constituents for an index (server-side cache)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                index: { type: string }
              required: [index]
      responses:
        "200":
          description: Update status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateConstituentsResponse'

  /api/constituents:
    get:
      operationId: get_constituents
      tags: [Universe]
      summary: Get stored constituents for an index
      parameters:
        - in: query
          name: index
          required: false
          schema: { type: string }
      responses:
        "200":
          description: Constituents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConstituentsResponse'

  /api/listings:
    get:
      operationId: get_listings
      tags: [Universe]
      summary: Get latest listings for an exchange (NSE/BSE)
      parameters:
        - in: query
          name: exchange
          required: false
          schema: { type: string, enum: [NSE_EQ, BSE_EQ] }
      responses:
        "200":
          description: Listings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsResponse'

  /api/screen_indices:
    post:
      operationId: screen_indices
      tags: [Screeners]
      summary: Screen indices by strategies (server-side)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenIndicesRequest'
      responses:
        "200":
          description: Screener results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenIndicesResponse'

  /api/signal:
    post:
      operationId: strategy_signal
      tags: [Screeners]
      summary: Get buy/sell/hold signal for a single symbol
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignalRequest'
      responses:
        "200":
          description: Signal result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalResponse'

  /api/breakout_signal:
    post:
      operationId: breakout_signal
      tags: [Breakouts]
      summary: Detect breakout for a single symbol (volume-confirmed)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakoutSignalReq'
      responses:
        "200":
          description: Breakout detection result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakoutSignalResp'

  /api/breakouts_symbols_one:
    post:
      operationId: breakouts_symbols_one
      tags: [Breakouts]
      summary: Scan a list of symbols one-at-a-time (cursor-based)
      description: >
        The server analyzes exactly one symbol per request (`cursor`).
        Client should call repeatedly, incrementing cursor until `done: true`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BreakoutsSymbolsReq'
      responses:
        "200":
          description: Result for the symbol at the given cursor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BreakoutsSymbolsResp'
